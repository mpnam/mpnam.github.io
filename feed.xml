<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MPNAM Site</title>
    <description>Welcome to my website.
</description>
    <lastBuildDate>Fri, 17 Mar 2017 10:59:54 +0900</lastBuildDate>
    <link>https://mpnam.github.io//</link>
    <atom:link href="https://mpnam.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 17 Mar 2017 10:59:54 +0900</pubDate>
    <lastBuildDate>Fri, 17 Mar 2017 10:59:54 +0900</lastBuildDate>
    <generator>Jekyll v3.4.1</generator>
    
      <item>
        <title>Custom Your Site in Moodle</title>
        <description>&lt;p&gt;This post I will show different ways to customize your site. Specifically, I will use Participants View as a demonstration.&lt;/p&gt;

&lt;h2 id=&quot;hide-user-fields&quot;&gt;Hide user fields&lt;/h2&gt;
&lt;p&gt;Lets have a look inside &lt;code&gt;/user/index.php&lt;/code&gt;. This is the file which ouput the page we want to customize.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Get the hidden field list.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;has_capability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;moodle/course:viewhiddenuserfields&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$hiddenfields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Teachers and admins are allowed to see everything.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$hiddenfields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;array_flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CFG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hiddenuserfields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$hiddenfields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;lastaccess&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Do not allow access since filtering.&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$accesssince&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From this, you can define which fields you want to show/hide. I recommend you to setting hidden fields in &lt;code&gt;Site administration / Users / Permissions / User Policies&lt;/code&gt;. Then, you need to specify which users you want to hide these field by update roles. Since this page is for course participants page, you may want to unset capability &lt;code&gt;moodle/course:viewhiddenuserfields&lt;/code&gt;. &lt;strong&gt;Note:&lt;/strong&gt; for the userâ€™s profile pages, use the capability &lt;code&gt;moodle/user:viewhiddendetails&lt;/code&gt; instead.&lt;/p&gt;

&lt;h2 id=&quot;hide-some-components&quot;&gt;Hide some components&lt;/h2&gt;
&lt;p&gt;In this section, I will give the example of how to hide user lists filter (top right corner in Boost theme).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mpnam.github.io//assets/img/participant_userlist.png&quot; alt=&quot;&quot; style=&quot;margin:0 auto;width:40%;height:40%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;$controlstable maintains the first row right after Participants title.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$formatmenu&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;brief&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                     &lt;span class=&quot;s1&quot;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;userdetails&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;single_select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$baseurl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mode&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$formatmenu&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;formatmenu&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set_label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;userlist&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$userlistcell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html_table_cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$userlistcell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$userlistcell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OUTPUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$controlstable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$userlistcell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html_writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$controlstable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The most easiest way is remove the statement &lt;code&gt;$controlstable-&amp;gt;data[0]-&amp;gt;cells[] = $userlistcell;&lt;/code&gt;. However, it would be very bad way to do it because other themes are also no longer show this component. I will show you how to make it more general and put your customization in your theme.  &lt;br /&gt;
Firstly, I will define additional render method in &lt;code&gt;user/renderer.php&lt;/code&gt; as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;	&lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Displays User list filter&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @return string&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user_participants_userlistfilter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To make it simple for the tutorial, this function only take a &lt;code&gt;$content&lt;/code&gt; and return itself. The idea is, I will override this render in my theme, and decide to return â€˜â€™. Therefore, the &lt;code&gt;$content&lt;/code&gt; will no longer appear in the view. Back to the &lt;code&gt;/user/index.php&lt;/code&gt;, I will modify the previous code about $controlstable$ as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$user_output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get_renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$controlstable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$user_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user_participants_userlistfilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$userlistcell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, the content of &lt;code&gt;$controlstable-&amp;gt;data[0]-&amp;gt;cells[]&lt;/code&gt; which shows the user lists filter, is the output of the render I have just made. If you change to body of the function &lt;code&gt;user_participants_userlistfilter&lt;/code&gt; to return â€˜â€™, you will see there is no user lists filter in the participant view. I will leave it return &lt;code&gt;$content&lt;/code&gt;, by that way, other themes will work as normal.&lt;/p&gt;

&lt;p&gt;Then, I will override the function &lt;code&gt;user_participants_userlistfilter&lt;/code&gt; in my theme, to make sure that it return â€˜â€™. You could read the post &lt;a href=&quot;&quot;&gt;Override a Render&lt;/a&gt; to know how to do it.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/moodle/2017/03/16/custom-participants-site.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//moodle/2017/03/16/custom-participants-site.html</guid>
        
        
        <category>Moodle</category>
        
      </item>
    
      <item>
        <title>Theory of Equality</title>
        <description>&lt;p&gt;This post demonstrates the implementation of the satisfiability for the theory of equality where literals of the forms &lt;script type=&quot;math/tex&quot;&gt;X = Y&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;X \neq Y&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; are terms built from variables and applications for uninterpreted function symbols.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;preliminaries&quot;&gt;Preliminaries&lt;/h2&gt;
&lt;p&gt;The equivalence relation is given by following axioms:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reflexivity:&lt;/strong&gt; &lt;script type=&quot;math/tex&quot;&gt;X = X&lt;/script&gt; &lt;br /&gt;
&lt;strong&gt;Symmetry:&lt;/strong&gt; &lt;script type=&quot;math/tex&quot;&gt;X = Y\Rightarrow Y = X&lt;/script&gt; &lt;br /&gt;
&lt;strong&gt;Transitivity:&lt;/strong&gt; &lt;script type=&quot;math/tex&quot;&gt;X = Y \wedge Y = Z\Rightarrow X = Z&lt;/script&gt; &lt;br /&gt;
&lt;strong&gt;Congruence:&lt;/strong&gt; For each &lt;script type=&quot;math/tex&quot;&gt;n-ary&lt;/script&gt; function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;f(s_1,...,s_n)=f(t_1,...,t_n)&lt;/script&gt; if &lt;script type=&quot;math/tex&quot;&gt;s_i=t_i&lt;/script&gt; for each &lt;script type=&quot;math/tex&quot;&gt;1\leq i \leq n&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;I will use the notation &lt;script type=&quot;math/tex&quot;&gt;\pi(t)&lt;/script&gt; for the set of terms of the form &lt;script type=&quot;math/tex&quot;&gt;f(t_1,...t_n)&lt;/script&gt; such that for some &lt;script type=&quot;math/tex&quot;&gt;i, 1\leq i \leq n, t\equiv t_i&lt;/script&gt;. Other hands, &lt;script type=&quot;math/tex&quot;&gt;\pi(t)&lt;/script&gt; is the set of parents of the equivalence class rooted by &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;I will use the following example through out the post.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(a,b)=a,\ f(f(a,b),b)=c,\ g(a)\neq g(c)&lt;/script&gt;

&lt;h2 id=&quot;union-find-algorithm&quot;&gt;Union-find algorithm&lt;/h2&gt;
&lt;p&gt;This is the most basic algorithm for checking satisfiabilily. The algorithm maintains two main data structures: a mapping &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; on the variables in the input and a set of input disequalities &lt;script type=&quot;math/tex&quot;&gt;D&lt;/script&gt;. Besides, it also maintains set of &lt;script type=&quot;math/tex&quot;&gt;\pi(t)&lt;/script&gt; where &lt;script type=&quot;math/tex&quot;&gt;t&lt;/script&gt; is variables appearing in the input. For the example shown above,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial:&lt;/strong&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;F=\{a\mapsto a, b\mapsto b, c\mapsto c,f(a,b)\mapsto f(a,b), f(f(a,b),b)\mapsto f(f(a,b),b), g(a)\mapsto g(a),g(c)\mapsto g(c) \}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;D=\{\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(a)=\{f(a,b),g(a)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(b)=\{f(a,b),f(f(a,b),b)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(c)=\{g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))=\{f(f(a,b),b)\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;f(a,b)=a&lt;/script&gt;. After update &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;, we check for each pair &lt;script type=&quot;math/tex&quot;&gt;p_1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;p_2&lt;/script&gt; of &lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\pi(a)&lt;/script&gt; if &lt;script type=&quot;math/tex&quot;&gt;q_1\equiv q_2&lt;/script&gt;. In this case, &lt;script type=&quot;math/tex&quot;&gt;f(f(a,b),b)\equiv f(a,b)&lt;/script&gt; . Therefore, we add this to the queue of equalities to be merged.
&lt;script type=&quot;math/tex&quot;&gt;F=\{a\mapsto a, b\mapsto b, c\mapsto c,f(a,b)\mapsto \color{red}{a}, f(f(a,b),b)\mapsto f(f(a,b),b), g(a)\mapsto g(a),g(c)\mapsto g(c) \}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;D=\{\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(a)=\{f(a,b),g(a)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(b)=\{f(a,b),f(f(a,b),b)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(c)=\{g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))=\{f(f(a,b),b)\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;f(f(a,b),b)= f(a,b)&lt;/script&gt;. Note that, the root equivalence class of &lt;script type=&quot;math/tex&quot;&gt;f(a,b)&lt;/script&gt; is &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;. Therefore, we update &lt;script type=&quot;math/tex&quot;&gt;f(f(a,b),b)&lt;/script&gt; to be &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;.
&lt;script type=&quot;math/tex&quot;&gt;F=\{a\mapsto a, b\mapsto b, c\mapsto c,f(a,b)\mapsto a, f(f(a,b),b)\mapsto \color{red}{a}, g(a)\mapsto g(a),g(c)\mapsto g(c) \}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;D=\{\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(a)=\{f(a,b),g(a)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(b)=\{f(a,b),f(f(a,b),b)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(c)=\{g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))=\{f(f(a,b),b)\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;f(f(a,b),b)=c&lt;/script&gt;. For optimization, instead of update &lt;script type=&quot;math/tex&quot;&gt;a=c&lt;/script&gt; since &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt; is the root of equivalence class of  &lt;script type=&quot;math/tex&quot;&gt;f(f(a,b),b)&lt;/script&gt;, we update &lt;script type=&quot;math/tex&quot;&gt;c&lt;/script&gt; to be &lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;. Then, &lt;script type=&quot;math/tex&quot;&gt;g(a)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;g(c)&lt;/script&gt; becomes equivalence and thus add to the queue of equalities to be merged.
&lt;script type=&quot;math/tex&quot;&gt;F=\{a\mapsto a, b\mapsto b, c\mapsto \color{red}{a},f(a,b)\mapsto a, f(f(a,b),b)\mapsto a, g(a)\mapsto g(a),g(c)\mapsto g(c) \}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;D=\{\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(a)=\{f(a,b),g(a)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(b)=\{f(a,b),f(f(a,b),b)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(c)=\{g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))=\{f(f(a,b),b)\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;g(a)=g(c)&lt;/script&gt;. &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;F=\{a\mapsto a, b\mapsto b, c\mapsto a,f(a,b)\mapsto a, f(f(a,b),b)\mapsto a, g(a)\mapsto g(a),g(c)\mapsto g(c), \color{red}{g(a)=g(c)} \}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;D=\{\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(a)=\{f(a,b),g(a),\color{red}{g(c)}\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(b)=\{f(a,b),f(f(a,b),b)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(c)=\{g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))=\{f(f(a,b),b)\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;g(a)\neq g(c)&lt;/script&gt; =&amp;gt; conflict due to &lt;script type=&quot;math/tex&quot;&gt;\color{red}{g(a)=g(c)}&lt;/script&gt; in &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;. &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;F=\{a\mapsto a, b\mapsto b, c\mapsto a,f(a,b)\mapsto a, f(f(a,b),b)\mapsto a, g(a)\mapsto g(a),g(c)\mapsto g(c), \color{red}{g(a)=g(c)} \}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;D=\{\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(a)=\{f(a,b),g(a),g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(b)=\{f(a,b),f(f(a,b),b)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(c)=\{g(c)\}&lt;/script&gt; &lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\pi(f(a,b))=\{f(f(a,b),b)\}&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;e-graph&quot;&gt;E-Graph&lt;/h2&gt;
&lt;p&gt;E-Graph is used in Simplify. It uses DAG (vertex-labeled directed oriented acyclic multigraph) to represent ground terms. In this context, ground terms are terms which do not have any quantifed variables. I will not describe in the detail E-Graph data structure in this post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initial:&lt;/strong&gt;  &lt;br /&gt;
&lt;img src=&quot;http://mpnam.github.io//assets/img/e-graph1.png&quot; alt=&quot;&quot; style=&quot;margin:0 auto;width:30%;height:30%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;f(a,b)=a&lt;/script&gt; &lt;br /&gt;
&lt;img src=&quot;http://mpnam.github.io//assets/img/e-graph2.png&quot; alt=&quot;&quot; style=&quot;margin:0 auto;width:30%;height:30%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; update equivalence relation
&lt;img src=&quot;http://mpnam.github.io//assets/img/e-graph3.png&quot; alt=&quot;&quot; style=&quot;margin:0 auto;width:30%;height:30%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; input &lt;script type=&quot;math/tex&quot;&gt;f(f(a,b),b)=c&lt;/script&gt; &lt;br /&gt;
&lt;img src=&quot;http://mpnam.github.io//assets/img/e-graph4.png&quot; alt=&quot;&quot; style=&quot;margin:0 auto;width:30%;height:30%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; update equivalence relation
&lt;img src=&quot;http://mpnam.github.io//assets/img/e-graph5.png&quot; alt=&quot;&quot; style=&quot;margin:0 auto;width:30%;height:30%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Based on the graph above, since &lt;script type=&quot;math/tex&quot;&gt;g(a)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;g(b)&lt;/script&gt; are equivalence, the input &lt;script type=&quot;math/tex&quot;&gt;g(a)\neq g(c)&lt;/script&gt; makes the formula is unsatisfiable.&lt;/p&gt;
</description>
        <pubDate>Wed, 15 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/research/2017/03/15/theory-of-equality.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//research/2017/03/15/theory-of-equality.html</guid>
        
        
        <category>Research</category>
        
      </item>
    
      <item>
        <title>DPLL Algorithm</title>
        <description>&lt;p&gt;This post is assumed that the readers have background in logic. DPLL (Davis-Putnam-Logemann-Loveland) is the basic algorithm for SAT solving.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;p&gt;The easiest way to learn an algorithm is from example. SAT problem is checking if a boolean formula is satisfiable. Because the first step of DPLL is to convert the formula into conjunctive normal form (CNF), I will use CNF form for any formula from now. Consider the following formula &lt;script type=&quot;math/tex&quot;&gt;K\equiv(p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q)&lt;/script&gt;. &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; is satisfiable if there exists a model &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;M\models K&lt;/script&gt;. In this example, &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt; is satisfiable with model &lt;script type=&quot;math/tex&quot;&gt;\{p\mapsto \top, q\mapsto \top\,s\mapsto \top\}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Intuitively, to satisfy &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;, we need to find assignments such that satisfy &lt;script type=&quot;math/tex&quot;&gt;(p \vee q), (\neg p \vee q), (p\vee \neg q), (s\vee \neg p\vee q)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;(\neg s\vee p \vee \neg q)&lt;/script&gt;. Firstly, we randomly assign &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\top&lt;/script&gt;. With this assumption, we obviously see that &lt;script type=&quot;math/tex&quot;&gt;(p \vee q), (p\vee \neg q)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;(\neg s\vee p \vee \neg q)&lt;/script&gt; are satisfied. In order to satisfy &lt;script type=&quot;math/tex&quot;&gt;(\neg p \vee q)&lt;/script&gt;, we need to assign &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\top&lt;/script&gt;. With this new assumption, we obviously see that &lt;script type=&quot;math/tex&quot;&gt;(s\vee \neg p\vee q)&lt;/script&gt; is satisfied. Finally, we have already satisfy all formulas by assignments &lt;script type=&quot;math/tex&quot;&gt;\{p\mapsto \top, q\mapsto \top\}&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Assume that in the first step, we randomly assign &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\bot&lt;/script&gt;. With this assumption, we obviously see that &lt;script type=&quot;math/tex&quot;&gt;(\neg p \vee q)&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;(s\vee \neg p\vee q)&lt;/script&gt; are satisfied. In order to satisfy &lt;script type=&quot;math/tex&quot;&gt;(p\vee \neg q)&lt;/script&gt;, we need to assign &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\bot&lt;/script&gt;. However, we see that with the current assumptions, &lt;script type=&quot;math/tex&quot;&gt;(p \vee q)&lt;/script&gt; is unsatisfiable. So we backjump to the previous assignment and assign &lt;script type=&quot;math/tex&quot;&gt;q&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\top&lt;/script&gt;. However, the new assumptions makes &lt;script type=&quot;math/tex&quot;&gt;(p \vee q)&lt;/script&gt; is unsatisfiable. Therefore, we backjump to the assignment of &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;. And go on,â€¦&lt;/p&gt;

&lt;h2 id=&quot;abstract-dpll&quot;&gt;Abstract DPLL&lt;/h2&gt;
&lt;p&gt;Before simulating how DPLL works over the example shown above. I would like to use the abstract version of DPLL which represented in Leonardo de Mouraâ€™s slides, &lt;em&gt;Summer School on Logic and Theorem Proving&lt;/em&gt;
&lt;img src=&quot;https://mpnam.github.io//assets/img/dpll.png&quot; alt=&quot;Summer School on Logic and Theorem Proving - Leonardo de Moura&quot; style=&quot;margin:0 auto;width:60%;height:60%;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each state of the procedure is a 3-tuple &lt;script type=&quot;math/tex&quot;&gt;\langle M,F,C \rangle&lt;/script&gt; consisting of partial assignment &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;, the input clause set &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; and a set &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; of conflict clauses derived from &lt;script type=&quot;math/tex&quot;&gt;K&lt;/script&gt;. I will give an intuitive explanation of each rule:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(Decide):&lt;/strong&gt; select an literal in &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; which has not been assigned yet, then assign it in &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;. It is similar to ramdomly assignment in the example.&lt;br /&gt;
&lt;strong&gt;(UnitPropagate):&lt;/strong&gt; with the current assignment &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt;, we are looking for some formula in &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; such that &lt;script type=&quot;math/tex&quot;&gt;M&lt;/script&gt; only satisfies this formula if &lt;script type=&quot;math/tex&quot;&gt;l&lt;/script&gt; is assigned. It looks like in Sudoku game. You may have some assumptions over some places. The other values over other places are filled based on those assumptions. &lt;br /&gt;
&lt;strong&gt;(Conflict):&lt;/strong&gt; The current $M$ leads to conflict state where there is exists clauses such that they are unsatisfiable. &lt;br /&gt;
&lt;strong&gt;(Resolve):&lt;/strong&gt;  Intuitively, if there is a model satisfies &lt;script type=&quot;math/tex&quot;&gt;(C \vee \neg l) \wedge (D \vee l)&lt;/script&gt;, this model also satisfies &lt;script type=&quot;math/tex&quot;&gt;C\vee D&lt;/script&gt;. &lt;br /&gt;
&lt;strong&gt;(Learn):&lt;/strong&gt; We may imply new formulas after resolving step. Learn simply update new formulas into input set. &lt;br /&gt;
&lt;strong&gt;(Backjump):&lt;/strong&gt; Backjump to the point where we can satisfy &lt;script type=&quot;math/tex&quot;&gt;C&lt;/script&gt; by new decide. &lt;br /&gt;
&lt;strong&gt;(Unsat):&lt;/strong&gt; Obviously, if we unable to find an assignment to resolve conflict, it is unsatisfiable.&lt;/p&gt;

&lt;h2 id=&quot;examples-using-dpll&quot;&gt;Examples using DPLL&lt;/h2&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\emptyset \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q) \Rightarrow \textbf{(Decide)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg p \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q) \Rightarrow \textbf{(UnitPropagate)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg p, q[p \vee q] \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q) \Rightarrow \textbf{(Conflict)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg p, q[p \vee q] \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q) \ ||\ (p\vee \neg q) \Rightarrow \textbf{(Resolve)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg p, q[p \vee q] \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q) \ ||\ p \Rightarrow \textbf{(Learn)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\neg p, q[p \vee q] \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q)\wedge p \ ||\ p \Rightarrow \textbf{(Backjump)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q)\wedge p \Rightarrow \textbf{(UnitPropagate)}&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p, q[\neg p \vee q] \ ||\ (p \vee q)\wedge (\neg p \vee q)\wedge (p\vee \neg q)\wedge (s\vee \neg p\vee q)\wedge (\neg s\vee p \vee \neg q)\wedge p&lt;/script&gt;

&lt;p&gt;The algorithm stops when &lt;script type=&quot;math/tex&quot;&gt;M\models F&lt;/script&gt;. In this case is &lt;script type=&quot;math/tex&quot;&gt;p,q&lt;/script&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/research/2017/03/14/dpll-algorithm.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//research/2017/03/14/dpll-algorithm.html</guid>
        
        
        <category>Research</category>
        
      </item>
    
      <item>
        <title>Event Observers in Moodle</title>
        <description>&lt;p&gt;It is essential to support such thing likes event observers in any framework. In this post, I will show how to defined your observers in Moodle.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;events&quot;&gt;Events&lt;/h2&gt;

&lt;p&gt;In Moodle, when an action takes place, an event is created by a core API or plugin. For example, core API events are stored in &lt;code&gt;/lib/classes/event&lt;/code&gt;. All events must be extended from abstact class &lt;strong&gt;base&lt;/strong&gt;. In order to trigger an event &lt;code&gt;$event&lt;/code&gt;, you simply executing &lt;code&gt;$event-&amp;gt;trigger()&lt;/code&gt;. For example, the following codes is for trigger the event of adding new blog post.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$eventparms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;context&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;objectid&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$newexternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;other&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$newexternal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\core\event\blog_external_added&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$eventparms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;observers&quot;&gt;Observers&lt;/h2&gt;

&lt;p&gt;Observers are described in &lt;code&gt;/lib/db/events.php&lt;/code&gt; in the array &lt;code&gt;$observers&lt;/code&gt;. Each observer is defined with the following properties (as described in &lt;a href=&quot;https://docs.moodle.org/dev/Event_2#What_are_events.3F&quot;&gt;Moodleâ€™s docs&lt;/a&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    * eventname â€“ fully qualified event class name or &quot;*&quot; indicating all events, ex.: \plugintype_pluginname\event\something_happened.
    * callback - PHP callable type.
    * includefile - optional. File to be included before calling the observer. Path relative to dirroot.
    * priority - optional. Defaults to 0. Observers with higher priority are notified first.
    * internal - optional. Defaults to true. Non-internal observers are not called during database transactions, but instead after a successful commit of the transaction
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this post, I am going to define my two new observers to observe events blog_entry_created and comment_created.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$observers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;eventname&amp;#39;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\core\event\blog_entry_created&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;s1&quot;&gt;&amp;#39;includefile&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/blog/classes/observer.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;callback&amp;#39;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;core_blog_observer::observe_blog_created&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;eventname&amp;#39;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;\core\event\comment_created&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	    &lt;span class=&quot;s1&quot;&gt;&amp;#39;includefile&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/comment/classes/observer.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;callback&amp;#39;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;core_comment_observer::observe_comment_created&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need to upgrade Moodle site (increment your version.php) to apply these changes.&lt;/p&gt;

&lt;p&gt;As in the example shown above, I need to define my observer named &lt;code&gt;observe_blog_created&lt;/code&gt; in class &lt;code&gt;core_blog_observer&lt;/code&gt; stored in &lt;code&gt;/blog/classes/observer.php&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt; * Event observer for blog.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;core_blog_observer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Triggered when &amp;#39;blog_entry_updated&amp;#39; event is triggered.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @param \core\event\blog_entry_updated $event&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;observe_blog_updated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;\core\event\blog_entry_updated&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//@todo&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;properties&quot;&gt;Properties&lt;/h2&gt;

&lt;p&gt;In order to create the instance of an event, there are some properties you need to pass. You could check it in &lt;a href=&quot;https://docs.moodle.org/dev/Event_2#What_are_events.3F&quot;&gt;Moodleâ€™s documentation&lt;/a&gt;. Besides, you can look directly into &lt;strong&gt;base&lt;/strong&gt; class in &lt;code&gt;/lib/db/event/base.php&lt;/code&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;eventname&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;component&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;action&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;objecttable&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;objectid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;crud&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;edulevel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contextid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;contextlevel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;contextinstanceid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;userid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;courseid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;relateduserid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;anonymous&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;other&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;timecreated&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that you can access these fields values in your observer with parameter &lt;code&gt;$event&lt;/code&gt;. To any information you want to pass, you should use field &lt;code&gt;other&lt;/code&gt; (variable array). Then in your observer, you get them in &lt;code&gt;$event-&amp;gt;other&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Thatâ€™s all. Goodluck :-).&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/moodle/2017/03/11/event-observers-in-moodle.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//moodle/2017/03/11/event-observers-in-moodle.html</guid>
        
        
        <category>Moodle</category>
        
      </item>
    
      <item>
        <title>Multiple Languages in Moodle Mobile 2</title>
        <description>&lt;hr /&gt;

&lt;h3 id=&quot;change-the-app-strings&quot;&gt;Change the app strings&lt;/h3&gt;
&lt;p&gt;Language strings are located in:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;www/core/lang/ folder (a different file for each language)&lt;br /&gt;
www/core/components/COMPONENT_NAME/lang folder&lt;br /&gt;
www/addons/ADDON_NAME/lang folder&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to update translation, simply edit &lt;em&gt;_lang_.json&lt;/em&gt; file content. The syntax is straightforward: &lt;code&gt;&quot;key&quot;: &quot;content&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use &lt;a href=&quot;http://jsonlint.com/&quot;&gt;jsonlint.com&lt;/a&gt; to validate that the new language file is correct.&lt;/p&gt;

&lt;p&gt;Remember to &lt;strong&gt;run gulp&lt;/strong&gt; or &lt;strong&gt;ionic serve&lt;/strong&gt; in the project root folder so the build files are created.&lt;/p&gt;

&lt;h3 id=&quot;add-new-language&quot;&gt;Add new language&lt;/h3&gt;
&lt;p&gt;Besides copying new &lt;em&gt;lang&lt;/em&gt;.json file into lang folder. You also need to update &lt;em&gt;config.json&lt;/em&gt; file in &lt;code&gt;/www&lt;/code&gt; folder, key &lt;code&gt;&quot;language&quot;&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/moodle/2017/03/10/multiple-language-in-moodle-mobile-2.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//moodle/2017/03/10/multiple-language-in-moodle-mobile-2.html</guid>
        
        
        <category>Moodle</category>
        
      </item>
    
      <item>
        <title>Syntax Highlighter for Jekyll</title>
        <description>&lt;hr /&gt;
&lt;p&gt;In Bitbucket or Github, it is quite easy to highligh my code using markdown syntax. But in Jekyll, it does not work in the same way. So far, I only know two ways to highligh code in Jekyll which are Pygments and Rouge. Rouge is faster and easier to install but does not support as many languages as Pygments. This post is about Pygments.&lt;/p&gt;

&lt;h2 id=&quot;prepare&quot;&gt;Prepare&lt;/h2&gt;

&lt;p&gt;Pygments is the Python syntax highlighter. Therefore, the first step is about installing Python. &lt;br /&gt;
So far, the working version of Python needed is v2.7. I have tried v3, but Jekyll did not work. So, I recommend using &lt;a href=&quot;wwww.python.org/download&quot;&gt;Python v2.7&lt;/a&gt;. If you are not familiar to Python, I recommend you to click the option &lt;strong&gt;Add python.exe to Path&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to install Pygments, you need to install &lt;strong&gt;Pip&lt;/strong&gt; which is a tool for installing ang managing Python packages. In my case, it is installed together with Python. The only step I need to do is opening cmd and execute&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;python pip install Pygments.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;configure-jekyll-to-use-pygments&quot;&gt;Configure Jekyll to use Pygments&lt;/h2&gt;
&lt;p&gt;Add the following dependency to your Gemfile &lt;code&gt;gem &quot;pygments.rb&quot;&lt;/code&gt;. For example, my Gemfile will look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jekyll_plugins&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jekyll-paginate&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-coffeescript&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;pygments.rb&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You need to set Pygments as your syntax highlighter by adding the following option in &lt;code&gt;_config.yml&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;highlighter: pygments&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/jekyll/2017/03/01/syntax-highlighter-for-jekyll.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//jekyll/2017/03/01/syntax-highlighter-for-jekyll.html</guid>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>Create New Services in Moodle</title>
        <description>&lt;hr /&gt;
&lt;h2 id=&quot;mobile-web-services&quot;&gt;Mobile Web Services&lt;/h2&gt;
&lt;p&gt;In order to use mobile web services (similar to other kind of services), you need to enable it as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     * In Settings &amp;gt; Site administration &amp;gt; Plugins &amp;gt; Web services &amp;gt; External services  
     * Check &quot;Enable mobile web services&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see the API Documentation in &lt;code&gt;Settings &amp;gt; Site administration &amp;gt; Plugins &amp;gt; Web services &amp;gt; API Documentation&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;declare-new-services-functions&quot;&gt;Declare new services functions&lt;/h2&gt;
&lt;p&gt;Firstly, you need to declare your new services in &lt;code&gt;.\lib\db\services.php&lt;/code&gt; (recommended). You can also declare your own &lt;code&gt;services.php&lt;/code&gt; in the &lt;strong&gt;db&lt;/strong&gt; sub-folder of your plugin. Actually, the second way is better since it makes the code is clear. But it may cost you time to make everything works due to my experience. Here is the sample structure of the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$functions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;local_PLUGINNAME_FUNCTIONNAME&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// the name of the web service function that the client will call.                                                                      // create this class in local/PLUGINNAME/externallib.php&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;classname&amp;#39;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;local_PLUGINNAME_external&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// implement this function into the above class&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;methodname&amp;#39;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;FUNCTIONNAME&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;classpath&amp;#39;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;local/PLUGINNAME/externallib.php&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;This documentation will be displayed in the generated API documentation &lt;/span&gt;
&lt;span class=&quot;s1&quot;&gt;                                          (Administration &amp;gt; Plugins &amp;gt; Webservices &amp;gt; API documentation)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// the value is &amp;#39;write&amp;#39; if your function does any database change, otherwise it is &amp;#39;read&amp;#39;.&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;write&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;c1&quot;&gt;// List the capabilities used in the function (missing capabilities are displayed for authorised users and&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// also for manually created tokens in the web interface, this is just informative).&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;capabilities&amp;#39;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;moodle/xxx:yyy, addon/xxx:yyy&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                 
                &lt;span class=&quot;c1&quot;&gt;// Optional, only available for Moodle 3.1 onwards. List of built-in services (by shortname) where the&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// function will be included. Services created manually via the Moodle interface are not supported.&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;services&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MOODLE_OFFICIAL_MOBILE_SERVICE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                             
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You need to update &lt;code&gt;version.php&lt;/code&gt; to upgrade Moodle. For further information, you might want to check these tables in the database: &lt;code&gt;mdl_external_services&lt;/code&gt;, &lt;code&gt;mdl_external_services_functions&lt;/code&gt;, &lt;code&gt;mdl_external_services_users&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;implement-services-functions&quot;&gt;Implement Services Functions&lt;/h2&gt;
&lt;p&gt;In the example shown above, you need to define a method named &lt;code&gt;FUNCTIONNAME&lt;/code&gt; in the classpath &lt;code&gt;local/PLUGINNAME/externallib.php&lt;/code&gt;. Each services function has three parts:&lt;/p&gt;

&lt;h4 id=&quot;declare-parameters&quot;&gt;Declare parameters&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Describes the parameters for post_course_blog.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @return external_external_function_parameters&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @since Moodle 2.5&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_course_blog_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_function_parameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_multiple_structure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_single_structure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                                &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;subject&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;summary&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_RAW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Summary&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VALUE_OPTIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;content&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_RAW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Content&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VALUE_OPTIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;attachment&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Attachment&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VALUE_OPTIONAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                        &lt;span class=&quot;s1&quot;&gt;&amp;#39;created&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Created&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;courseid&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Course ID&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;userid&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;User ID&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;body&quot;&gt;Body&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Post a blog into a course&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @param blog $blog detail&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @return status&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @since Moodle 2.5&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_course_blog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$courseid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$userid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CFG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

        &lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dirroot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/blog/lib.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dirroot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/user/lib.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;require_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CFG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dirroot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/blog/blog_airnotifier.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validate_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post_course_blog_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; 
                                                         &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                               &lt;span class=&quot;s1&quot;&gt;&amp;#39;courseid&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$courseid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                                               &lt;span class=&quot;s1&quot;&gt;&amp;#39;userid&amp;#39;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$userid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Validate course&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$course&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get_record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;course&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;courseid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moodle_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;invalidcourseid&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//@todo: Do something here&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;status&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$insertedID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;return&quot;&gt;Return&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Describes the post_course_blog return value.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @return external_multiple_structure&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @since Moodle 2.5&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_course_blog_returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_single_structure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;status&amp;#39;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Status (0 is fail, 1 is success)&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;external_value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PARAM_INT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Blog id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0900</pubDate>
        <link>https://mpnam.github.io/moodle/2017/03/01/create-new-services-in-moodle.html</link>
        <guid isPermaLink="true">https://mpnam.github.io//moodle/2017/03/01/create-new-services-in-moodle.html</guid>
        
        
        <category>Moodle</category>
        
      </item>
    
  </channel>
</rss>
